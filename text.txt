+, 'SSR' và 'CSR' : 
   'SSR' : server side rendering
  => Mã js,html được render phía server
  => được sử dụng trong web cần y/tố 'SEO' tối ưu hóa công cụ tìm kiếm
   VD: trang về báo trí , 
  => dữ liệu trang web nằm trong mã html trả về
  => 'Cần load lại trang trong nhưng lần req'
  => tối cho 'SEO'
  => 'req đầu' nhanh hơn
  => Time phát triển nhanh hơn
  => Sử dụng dự án , app 'nhỏ'


   'CSR' : client side rendering
  => Mã js,html được render phía server nằm trong viewsourcde
  => trả về vẫn có code của 'SSR' , trả về ít code , trả về 1 số file js
  => khi view source sẽ gôm thẻ <main> , <div> chưa nd toàn bộ trang khi thông dịch file js
  => khi log sẽ có đầy đủ thông tin trang web
  => phía client đọc(trình duyệt) file js và append vào thẻ <main> , <div>
  => trình duyệt phải bật js 
  => tốt trải nghiệm người dùng
  => Dài hạn dùng 'CSR'
  => Phải viết API
  => 'Không cần load lại trang'

====>   Có 1 số trang web sử dụng cả 2 
====> 'CSR' : ko tốt cho sale

   
+, '--save-dev' : install bên phía dev(trong quá trình phía triển) , 
 khi chạy dự án thật sẽ ko cần => lưu vào biến temp ổ C(khongp lưu vào node-modules)

+, 'Nodemon' : lưu sự thay đổi và đẩy lên trang web
VD : thường thì thay đổi sẽ phải load lại server nhưng đối vs nodemon sẽ
ko phải load 
  +, '--inspect ' vào start sẽ tao ra 1 chức năng debug phía client

+," Morgan " : Quan sat được những log vs những req từ phía client
 lên 'node server'
 => có thể dùng để debug

+, Temple engines(handlebars) : viết ra những file chứa mã htmlgọn hơn,
  chia layout, 

+, Config to use static files (files tĩnh) => files css , images


+, Config to use SASS => file .scss
// không viết code vào file.css => file.scss
// brower ko đọc files .scss 
// =>  file.scss complie file.css trong public (thư mục tĩnh)
// ==> Config thành 1 cmd để khi run server sẽ lắng nghe và complie
// cấu hình 1 : node-sass [options] <input> [output] 
// cấu hình 2 : cat <input> | node-sass > output
   +, input : file.scss
   +, output : file.css
   +, options : chế độ tùy chọn

   // có thể cofig lại những file có đuôi muốn nodemon lắng nghe

+, 'Basic routing' : định nghĩa router có thể truy cập vào website(get,put,post,delete)
  Brower mapping vs router khi client serach trên thanh công cụ
    URL tồn tại duy nhất => URI(Path) , 
    Domain : điểm cuối của URI
    URI sẽ sử dụng phương thức của giao thức HTTP
    1 router có thể có 1 hoặc nhiều funtion để sử lí và đc thực thi khi
     router được gọi đến
      Config : app.METHOD(PATH , HANDLER)

+, 'Query parameters' : các parameter truyền vào sau url và trả về phía server
 VD : search?q=f8laptrinh&ref=f8&author=s
  Tồn tại trong tất cả các method
  thường sử dụng với method : 'GET'

  +, 'Default behavior of HTML forms' : hành vi mặc định của form

  chú ý khi submit nếu method = 'post' thì reload lại vẫn là post 
  => đổi gọi lại uRL => 'GET'
  => dữ liệu thông tin client chứa trong đt "Query"
  => submit qua pp 'req.query'


  +, "POST METHOD" : gửi dữ liệu thì client -> server
    tránh lộ những dữ liệu thông tin người dùng
    => dữ liệu thông tin client chứa trong đt "FORM DATA"
    => lấy qua pp 'req.body'

 +, 'MVC' : Mô hình MVC 
   'M' : Model (tương tác với datasource , resource ,  )
   'V' : View (Chứa file views (html , css))
   'C' : Controller (Trung chuyển giữa model vs view)
   ==> Giúp quản lý project
   ==> Tách ra các thành phần
   quá trình từ client --> server : " Brower -> Web Server -> Router -> Dispatcher -> Controller(xử lý model vs view)-> WenServer -> Brower"

    VD : app.get("/news",(req,res)=> res.render('xx'))
  đối vs router :
   Phần path(app.get('/news')) viết bên 'news.js'(routes)
  Phần functionhandles ((req,res)=> res.render('xx')) viết bên controller
      Vòng đi :
      ĐI từ router ngoiaf index.js
      => routers/index
      => new.js
      => controller

+, 'Prettier ' : Giúp format code (có thể dùng save formatt trong VS code),
 +'lint -staged + husky' : giúp format code trc khi commit
 ==> Khi chạy 'npm run beautiful' => chạy "lint-staged " => tìm đến "lint - staged " để chạy 
  chú ý : lint - staged khi đc 'git add ' thì ms bắt đầu đầu chạy 'npm để fomat rồi commit'
  +, 'Husky' : sẽ tự động chạy prettier và 'lint-staged ' khi 'commit code'
 
+, Cài đặt 'JSON viewer' giúp nhìn dữ liệu trên CHrom rõ ràng hơn
+, Override method : Ghi đè lại phương thức submit
  VD : hhh.com/cources/:id?method="PUT,Delete"
+, nếu muốn điều hướng lại trang trc : res.redrect('back');
       

  

 


